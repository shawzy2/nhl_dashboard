import math

#### Start of code generated by ChatGPT ####
def get_delta_e(color1, color2):
    # Convert RGB values to lab color space
    lab1 = rgb_to_lab(color1)
    lab2 = rgb_to_lab(color2)

    # Calculate Delta E using the CIEDE2000 algorithm
    return ciede2000(lab1, lab2)

def rgb_to_lab(rgb):
    # Convert RGB to XYZ
    r, g, b = [x / 255.0 for x in rgb]
    r = gamma_correction(r)
    g = gamma_correction(g)
    b = gamma_correction(b)

    x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375
    y = r * 0.2126729 + g * 0.7151522 + b * 0.0721750
    z = r * 0.0193339 + g * 0.1191920 + b * 0.9503041

    # Normalize XYZ to D65 white point
    x /= 0.95047
    z /= 1.08883

    # Convert XYZ to Lab
    epsilon = 0.008856
    kappa = 903.3
    delta = 0.00856

    x = pivot_xyz(x)
    y = pivot_xyz(y)
    z = pivot_xyz(z)

    L = 116 * y - 16 if y > epsilon else kappa * y
    a = 500 * (x - y)
    b = 200 * (y - z)

    return L, a, b

def gamma_correction(value):
    if value <= 0.04045:
        return value / 12.92
    return math.pow((value + 0.055) / 1.055, 2.4)

def pivot_xyz(value):
    return math.pow(value, 1 / 3) if value > 0.008856 else (value * 7.787) + (16 / 116)


def calculate_h_prime(b, a_prime):
    h_prime = math.degrees(math.atan2(b, a_prime))
    if h_prime < 0:
        h_prime += 360
    return h_prime

def ciede2000(lab1, lab2):
    L1, a1, b1 = lab1
    L2, a2, b2 = lab2

    # Constants
    k_L = 1
    k_C = 1
    k_H = 1

    # Weighting factors
    C1 = math.sqrt(a1 ** 2 + b1 ** 2)
    C2 = math.sqrt(a2 ** 2 + b2 ** 2)
    a_C1_C2 = (C1 + C2) / 2
    G = 0.5 * (1 - math.sqrt(math.pow(a_C1_C2, 7) / (math.pow(a_C1_C2, 7) + math.pow(25, 7))))
    a1_prime = (1 + G) * a1
    a2_prime = (1 + G) * a2

    # Calculate C'ab
    C1_prime = math.sqrt(a1_prime ** 2 + b1 ** 2)
    C2_prime = math.sqrt(a2_prime ** 2 + b2 ** 2)

    # Calculate h'ab
    h1_prime = calculate_h_prime(b1, a1_prime)
    h2_prime = calculate_h_prime(b2, a2_prime)

    # Calculate Delta L', Delta C', Delta H'
    Delta_L_prime = L2 - L1
    Delta_C_prime = C2_prime - C1_prime
    Delta_h_prime = calculate_delta_h_prime(C1, C2, h1_prime, h2_prime)

    # Calculate Delta H' contribution
    Delta_H_prime = 2 * math.sqrt(C1_prime * C2_prime) * math.sin(math.radians(Delta_h_prime) / 2)

    # Calculate L', C', and h' averages
    L_prime_avg = (L1 + L2) / 2
    C_prime_avg = (C1_prime + C2_prime) / 2
    h_prime_avg = calculate_h_prime_avg(h1_prime, h2_prime)

    # Calculate T, SL, SC, SH, and RT
    T = 1 - 0.17 * math.cos(math.radians(h_prime_avg - 30)) + 0.24 * math.cos(math.radians(2 * h_prime_avg)) + 0.32 * math.cos(math.radians(3 * h_prime_avg + 6)) - 0.20 * math.cos(math.radians(4 * h_prime_avg - 63))
    SL = 1 + (0.015 * math.pow(L_prime_avg - 50, 2)) / math.sqrt(20 + math.pow(L_prime_avg - 50, 2))
    SC = 1 + 0.045 * C_prime_avg
    SH = 1 + 0.015 * C_prime_avg * T
    RT = -2 * math.sqrt(math.pow(C_prime_avg, 7) / (math.pow(C_prime_avg, 7) + math.pow(25, 7))) * math.sin(math.radians(60 * math.exp(-math.pow((h_prime_avg - 275) / 25, 2))))

    # Calculate Delta E
    Delta_E = math.sqrt(math.pow(Delta_L_prime / (k_L * SL), 2) + math.pow(Delta_C_prime / (k_C * SC), 2) + math.pow(Delta_H_prime / (k_H * SH), 2) + RT * (Delta_C_prime / (k_C * SC)) * (Delta_H_prime / (k_H * SH)))

    return Delta_E

def calculate_delta_h_prime(C1, C2, h1_prime, h2_prime):
    if C1 * C2 == 0:
        return 0
    elif abs(h2_prime - h1_prime) <= 180:
        return h2_prime - h1_prime
    elif h2_prime - h1_prime > 180:
        return h2_prime - h1_prime - 360
    else:
        return h2_prime - h1_prime + 360
    
def calculate_h_prime_avg(h1_prime, h2_prime):
    if abs(h1_prime - h2_prime) > 180:
        return (h1_prime + h2_prime + 360) / 2
    else:
        return (h1_prime + h2_prime) / 2
#### End of code generated by ChatGPT ####

def get_color_diff(hex1, hex2):
    # convert team1 hex to rgb
    hex1_r = int(hex1[1:3], 16)
    hex1_g = int(hex1[3:5], 16)
    hex1_b = int(hex1[5:], 16)
    color1_rgb = (hex1_r, hex1_g, hex1_b)

    # convert team2 hex to rgb
    hex2_r = int(hex2[1:3], 16)
    hex2_g = int(hex2[3:5], 16)
    hex2_b = int(hex2[5:], 16)
    color2_rgb = (hex2_r, hex2_g, hex2_b)
    
    return get_delta_e(color1_rgb, color2_rgb)

def decide_color(home_primary = '', home_secondary = '', away_primary = '', away_secondary = ''):
    color_home = home_primary
    color_away = '#A2AAAD'

    # for each combination of home/away colors, check if colors are opposite
    delta_e_threshold = 25 # custom set threshold to determine if colors are 'different'
    if get_color_diff(home_primary, away_primary) > delta_e_threshold:
        color_home = home_primary
        color_away = away_primary
    elif get_color_diff(home_primary, away_secondary) > delta_e_threshold:
        color_home = home_primary
        color_away = away_secondary
    else:
        color_home = home_primary # default home to primary color
        color_away = '#A2AAAD' # default away to grey

    # return colors as dict
    return {
        'home': color_home,
        'away': color_away
    }